目的:
- work/req/leak_investigation_20241231.txt で特定したターゲットリークを解消し、学習・評価が train_end_date 以前の情報のみで完結するようにする。

対象スクリプト (work/script):
- train_model_product_level.py
- train_and_save_product_level.py
- generate_features_product_level.py（必要に応じて）
- prepare_product_level_data_local.py（必要に応じて）

改修要件:
1. 将来実績によるプロダクト選別の廃止
   - 現状: train_model_product_level.py と TimeSeriesPredictor._filter_important_material_keys 内で、予測対象期間の actual_value > 0 を条件に product/material_key を選別している。
   - 変更方針:
     - train_model_product_level.py 内のフィルタリング (active_products_test) を削除し、train_end_date 以前の指標のみで選別するか、選別自体を無効化する。
     - TimeSeriesPredictor に依存する train_and_save_product_level.py からも、未来実績に基づく選別が呼び出されないようガードまたはパラメータ化する。
     - 必要に応じて TimeSeriesPredictor 呼び出し時に min_test_active_records 等を明示的に無効化するが、この改修は /home/ubuntu/yamasa 側との整合性を別途検討。

2. ex-ante 指標による任意の選別ロジック再設計
   - 選別が必要な場合、train_end_date 以前の情報に限定。
   - 候補例:
     - 直近 N 日/週/月の実績発生数または合計値に基づく閾値。
     - 営業から提供された固定リスト (別ファイル) を読み込む。
   - 改修対象ファイルに設定値をまとめ、将来調整できるようにする (例: 設定セクションや定数)。

3. 評価指標計算の網羅性
   - 予測対象データセットから除外するロジックを見直し、実行時点で未知な情報に依存しない。
   - train_model_product_level.py では self.prediction_targets の設定方法を変更 (OR: train データ起点の閾値、または全 product_key)。
   - train_and_save_product_level.py が生成する日次予測・サマリー CSV に全対象製品が含まれることを確認できる仕組みを追加 (例: ログ出力)。

4. TimeSeriesPredictor 呼び出し方法の調整
   - train_and_save_product_level.py と train_model_product_level.py の双方で、TimeSeriesPredictor.tran_test_predict_time_split 呼び出し時に future-based filtering が作動しないよう制御する。
     - 具体施策は後続調査 (例: TimeSeriesPredictor を修正、またはローカルコピーで上書き)。
   - 今回の改修範囲では /home/ubuntu/yamasa 側のソースを直接変更しない前提だが、API 変更を許容する場合は別途仕様追加。

5. 追加のリーク防止ガード
   - Feature Generator やトレーナー内で、train_end_date を超えるデータを参照する場合は例外を発生させる。
   - フィルタリング結果に test 期間データが混入していないかを確認するアサーションまたはログを追加。

検証方針:
- 修正後、train_end_date より後の actual_value にアクセスしていないことを単体テストまたは処理内ログで確認。
- 既存の出力 (work/data/output) を更新する際、対象 product_key 数が増加する見込みであることを周知。
- 参考指標として、修正後に同条件で再学習・再評価し、リーク前後のメトリクス変化を記録する。

備考:
- 実装前に /home/ubuntu/yamasa/modules/models/train_predict.py との整合性 (モジュール差し替え可否) を判断。
- 必要であれば、train_end_date や step_count を設定で一元管理するリファクタリングを仕様追加候補として検討。
