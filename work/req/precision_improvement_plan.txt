精度改善方針（vis_2024-12-31_3_nozero）
================================================================

観察結果
- すべての商品で予測初月とそれ以降の挙動が断絶。例：`A01101A.png` では2024年12月末の水準を初月も維持する一方、2か月目以降はほぼゼロ近辺まで急落し、実績と乖離。
- 最新特徴量（`work/data/features/product_level_features_latest.parquet`）を確認すると、テスト期間 11,034 行中 10,936 行で `lag_1_f` が欠損。ローリング系指標もホライズン全体で一定値となり、状態更新が起きていない。
- 可視化スクリプトが日次の欠損をゼロ埋めして再サンプリングしているため、後続月のズレが見かけ上小さく見えている。

原因分析
- `generate_lag_features` のテスト処理が、学習最終日のラグ値のみをコピーし、その後のホライズンで再計算をしていない。結果として2日目以降の予測はモデルのバイアス項のみで決まり、学習期末のピークに引きずられる。
- ローリング平均・EMA・トレンド等の時系列特徴量も同様に固定値のままで、予測期間に入ると最新需要を参照した特徴更新が一切行われない。マルチステップ推論なのに特徴量は単ステップ前提のまま。
- `TimeSeriesPredictor.train_test_predict_time_split` は事前生成した特徴テーブルをそのまま利用しており、推論時の逐次更新を想定していない。訓練はトレイン区間のみで正常でも、評価では更新されない特徴を食わせたまま未来実績と比較している。

改善ロードマップ
1. 特徴量生成の再設計
   a. `generate_lag_features` をオートレグレッシブに再実装し、予測日ごとに直前の実績または予測をバッファに追加してラグを再計算する。
   b. ローリング平均・EMA・トレンド特徴量も同じバッファを用いた逐次更新方式に統一。最新の窓データをキューで管理し、予測が進むたびに更新するユーティリティを実装。
   c. 連続休業や需要空白期間を捉えるため、「直近実績日からの日数」「直近営業日のギャップ」等のギャップ特徴量を追加して、長期休暇後の需要変動を学習させる。

2. 学習と推論の整合性確保
   a. `TimeSeriesPredictor` の推論パイプラインを拡張し、学習はトレインチャンクで行い、推論時は初期コンテキスト（最新K日）から特徴をその場で生成してホライズンを順次予測する仕組みに変更。
   b. 2024年データを用いたウォークフォワード検証（例：4週間ごとのローリング検証）を導入し、実サービス同等の条件で初月バイアスを事前に検出できるようにする。
   c. 低ボリューム品のフィルタリング条件を見直し、必要ラグ本数を満たせない場合は季節ベースラインへのフォールバック／ルールベース補正を明示する。

3. 校正とバイアス補正
   a. 月次総量の乖離を抑えるため、階層的な月次スケーリングやベイジアン縮小を導入し、単純なクリップではなく歴史的月別平均に漸近させる。
   b. 初月に集中する過大推計を抑えるため、月別の予測対実績比率を分析し、イベント/カレンダ特徴と連携した調整ルールを再設計する。

4. 診断・可視化改善
   a. `visualize_predictions.py` を改修し、日付再サンプリング時にゼロ埋めせず欠損を保持。評価メトリクスも実際に観測された日付のみで算出するよう変更。
   b. 予測値と並行してラグ・ローリング特徴量の推移を可視化するデバッグ用レポートを作成し、予測期間中に特徴が凍結していないかを即時確認できるようにする。

実装前に揃える成果物
- 新しい逐次特徴量ビルダーがホライズン全体で `lag_*` を確実に埋めることを示す検証ノート（ステップごとの特徴値ログ付き）。
- ウォークフォワードバックテストレポート（月別MAPE/MAE）により、初月バイアスが解消されたことを定量的に確認。
- 追加ライブラリや設定変更が必要な場合の要件整理（例：パフォーマンス最適化に numba を導入する等）を事前に精査。
